Build started 15/11/2017 19:45:07.
     1>Project "E:\Github\BLPG-Solver\BLPG-Solver\BLPG-Solver.vcxproj" on node 2 (Build target(s)).
     1>Project "E:\Github\BLPG-Solver\BLPG-Solver\BLPG-Solver.vcxproj" (1) is building "E:\Github\BLPG-Solver\BLPG-Solver\BLPG-Solver.vcxproj" (1:2) on node 2 (CudaBuildCore target(s)).
     1>CudaBuildCore:
         Compiling CUDA source file GPU_Tester.cu...
     1>Project "E:\Github\BLPG-Solver\BLPG-Solver\BLPG-Solver.vcxproj" (1) is building "E:\Github\BLPG-Solver\BLPG-Solver\BLPG-Solver.vcxproj" (1:3) on node 1 (CudaBuildCore target(s)).
     1>CudaBuildCore:
         Compiling CUDA source file simplex.cu...
     1>CudaBuildCore:
         cmd.exe /C "C:\Users\paul\AppData\Local\Temp\tmpbf308e6eb7a446e8bee77cbdd42c15c0.cmd"
         "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0\bin\nvcc.exe" -gencode=arch=compute_20,code=\"sm_20,compute_20\" --use-local-env --cl-version 2013 -ccbin "C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\bin\x86_amd64"  -I"E:\Github\BLPG-Solver\/include" -IE:\SDKs\boost_1_57_0 -I"E:\SDKs\glpk-4.63\src" -I"C:\Program Files (x86)\Visual Leak Detector\include" -I"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0\include" -I"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0\include"  -G   --keep-dir x64\Debug -maxrregcount=0  --machine 64 --compile -cudart static  -g   -DWIN32 -DWIN64 -D_DEBUG -D_CONSOLE -D_MBCS -DBOOST_UBLAS_USE_INDEXED_ITERATOR -Xcompiler "/EHsc /W3 /nologo /Od /FS /Zi /RTC1 /MDd " -o x64\Debug\GPU_Tester.cu.obj "E:\Github\BLPG-Solver\BLPG-Solver\GPU_Tester.cu"
         
         E:\Github\BLPG-Solver\BLPG-Solver>"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0\bin\nvcc.exe" -gencode=arch=compute_20,code=\"sm_20,compute_20\" --use-local-env --cl-version 2013 -ccbin "C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\bin\x86_amd64"  -I"E:\Github\BLPG-Solver\/include" -IE:\SDKs\boost_1_57_0 -I"E:\SDKs\glpk-4.63\src" -I"C:\Program Files (x86)\Visual Leak Detector\include" -I"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0\include" -I"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0\include"  -G   --keep-dir x64\Debug -maxrregcount=0  --machine 64 --compile -cudart static  -g   -DWIN32 -DWIN64 -D_DEBUG -D_CONSOLE -D_MBCS -DBOOST_UBLAS_USE_INDEXED_ITERATOR -Xcompiler "/EHsc /W3 /nologo /Od /FS /Zi /RTC1 /MDd " -o x64\Debug\GPU_Tester.cu.obj "E:\Github\BLPG-Solver\BLPG-Solver\GPU_Tester.cu" 
     1>CudaBuildCore:
         cmd.exe /C "C:\Users\paul\AppData\Local\Temp\tmpc0e3d7c3f4f346d083ef14cf81f976cd.cmd"
         "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0\bin\nvcc.exe" -gencode=arch=compute_20,code=\"sm_20,compute_20\" --use-local-env --cl-version 2013 -ccbin "C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\bin\x86_amd64"  -I"E:\Github\BLPG-Solver\/include" -IE:\SDKs\boost_1_57_0 -I"E:\SDKs\glpk-4.63\src" -I"C:\Program Files (x86)\Visual Leak Detector\include" -I"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0\include" -I"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0\include"  -G   --keep-dir x64\Debug -maxrregcount=0  --machine 64 --compile -cudart static  -g   -DWIN32 -DWIN64 -D_DEBUG -D_CONSOLE -D_MBCS -DBOOST_UBLAS_USE_INDEXED_ITERATOR -Xcompiler "/EHsc /W3 /nologo /Od /FS /Zi /RTC1 /MDd " -o x64\Debug\simplex.cu.obj "E:\Github\BLPG-Solver\BLPG-Solver\simplex.cu"
         
         E:\Github\BLPG-Solver\BLPG-Solver>"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0\bin\nvcc.exe" -gencode=arch=compute_20,code=\"sm_20,compute_20\" --use-local-env --cl-version 2013 -ccbin "C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\bin\x86_amd64"  -I"E:\Github\BLPG-Solver\/include" -IE:\SDKs\boost_1_57_0 -I"E:\SDKs\glpk-4.63\src" -I"C:\Program Files (x86)\Visual Leak Detector\include" -I"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0\include" -I"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0\include"  -G   --keep-dir x64\Debug -maxrregcount=0  --machine 64 --compile -cudart static  -g   -DWIN32 -DWIN64 -D_DEBUG -D_CONSOLE -D_MBCS -DBOOST_UBLAS_USE_INDEXED_ITERATOR -Xcompiler "/EHsc /W3 /nologo /Od /FS /Zi /RTC1 /MDd " -o x64\Debug\simplex.cu.obj "E:\Github\BLPG-Solver\BLPG-Solver\simplex.cu" 
     1>E:\SDKs\boost_1_57_0\boost/typeof/msvc/typeof_impl.hpp(237): warning : extra ";" ignored
     1>E:\SDKs\boost_1_57_0\boost/typeof/msvc/typeof_impl.hpp(237): warning : extra ";" ignored
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(484): warning : variable "err" was set but never used
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(881): warning : variable "result" was set but never used
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(616): warning : variable "err" was set but never used
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(768): warning : variable "result" was set but never used
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(970): warning : variable "result" was set but never used
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(563): warning : variable "err" was set but never used
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(565): warning : variable "number_of_blocks" was declared but never referenced
     1>E:\SDKs\boost_1_57_0\boost/array.hpp(123): warning : controlling expression is constant
     1>E:\SDKs\boost_1_57_0\boost/array.hpp(129): warning : controlling expression is constant
     1>E:\SDKs\boost_1_57_0\boost/array.hpp(123): warning : controlling expression is constant
     1>E:\SDKs\boost_1_57_0\boost/array.hpp(129): warning : controlling expression is constant
     1>E:\SDKs\boost_1_57_0\boost/typeof/msvc/typeof_impl.hpp(237): warning : extra ";" ignored
     1>E:\SDKs\boost_1_57_0\boost/typeof/msvc/typeof_impl.hpp(237): warning : extra ";" ignored
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(484): warning : variable "err" was set but never used
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(881): warning : variable "result" was set but never used
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(616): warning : variable "err" was set but never used
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(768): warning : variable "result" was set but never used
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(970): warning : variable "result" was set but never used
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(563): warning : variable "err" was set but never used
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(565): warning : variable "number_of_blocks" was declared but never referenced
     1>CUDACOMPILE : nvcc warning : The 'compute_20', 'sm_20', and 'sm_21' architectures are deprecated, and may be removed in a future release (Use -Wno-deprecated-gpu-targets to suppress warning).
         simplex.cu
     1>CUDACOMPILE : nvcc warning : The 'compute_20', 'sm_20', and 'sm_21' architectures are deprecated, and may be removed in a future release (Use -Wno-deprecated-gpu-targets to suppress warning).
         GPU_Tester.cu
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(425): warning C4267: 'return' : conversion from 'size_t' to 'int', possible loss of data
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(451): warning C4244: '=' : conversion from 'double' to 'float', possible loss of data
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(473): warning C4267: 'initializing' : conversion from 'size_t' to 'unsigned int', possible loss of data
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(474): warning C4267: 'initializing' : conversion from 'size_t' to 'unsigned int', possible loss of data
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(515): warning C4018: '<' : signed/unsigned mismatch
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(516): warning C4018: '<' : signed/unsigned mismatch
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(537): warning C4018: '<' : signed/unsigned mismatch
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(570): warning C4267: 'initializing' : conversion from 'size_t' to 'int', possible loss of data
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(572): warning C4267: 'initializing' : conversion from 'size_t' to 'unsigned int', possible loss of data
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(573): warning C4267: 'initializing' : conversion from 'size_t' to 'int', possible loss of data
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(592): warning C4267: 'initializing' : conversion from 'size_t' to 'int', possible loss of data
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(595): warning C4018: '>' : signed/unsigned mismatch
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(640): warning C4018: '<' : signed/unsigned mismatch
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(644): warning C4018: '<' : signed/unsigned mismatch
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(645): warning C4018: '>=' : signed/unsigned mismatch
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(652): warning C4018: '<' : signed/unsigned mismatch
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(657): warning C4018: '<' : signed/unsigned mismatch
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(659): warning C4018: '<' : signed/unsigned mismatch
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(661): warning C4018: '>=' : signed/unsigned mismatch
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(661): warning C4018: '<' : signed/unsigned mismatch
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(663): warning C4244: 'initializing' : conversion from 'double' to 'float', possible loss of data
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(692): warning C4018: '<' : signed/unsigned mismatch
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(696): warning C4018: '>=' : signed/unsigned mismatch
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(696): warning C4018: '<' : signed/unsigned mismatch
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(710): warning C4018: '<' : signed/unsigned mismatch
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(712): warning C4018: '<' : signed/unsigned mismatch
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(799): warning C4018: '<' : signed/unsigned mismatch
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(800): warning C4018: '<' : signed/unsigned mismatch
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(818): warning C4018: '<' : signed/unsigned mismatch
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(820): warning C4018: '<' : signed/unsigned mismatch
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(821): warning C4018: '<' : signed/unsigned mismatch
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(883): warning C4018: '<' : signed/unsigned mismatch
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(913): warning C4018: '<' : signed/unsigned mismatch
     1>E:/Github/BLPG-Solver/BLPG-Solver/simplex.cu(565): warning C4101: 'number_of_blocks' : unreferenced local variable
     1>C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\include\xmemory(348): warning C4996: 'std::_Uninitialized_copy0': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\include\xmemory(333) : see declaration of 'std::_Uninitialized_copy0'
                 E:\SDKs\boost_1_57_0\boost/numeric/ublas/storage.hpp(94) : see reference to function template instantiation '_FwdIt std::uninitialized_copy<const double*,double*>(_InIt,_InIt,_FwdIt)' being compiled
                 with
                 [
                     _FwdIt=double *
         ,            _InIt=const double *
                 ]
                 E:\SDKs\boost_1_57_0\boost/numeric/ublas/storage.hpp(89) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<scalar_type,std::allocator<scalar_type>>::unbounded_array(const boost::numeric::ublas::unbounded_array<scalar_type,std::allocator<scalar_type>> &)'
                 with
                 [
                     scalar_type=double
                 ]
                 E:\SDKs\boost_1_57_0\boost/numeric/ublas/matrix.hpp(162) : see reference to function template instantiation 'boost::numeric::ublas::unbounded_array<scalar_type,std::allocator<scalar_type>>::unbounded_array(const boost::numeric::ublas::unbounded_array<scalar_type,std::allocator<scalar_type>> &)' being compiled
                 with
                 [
                     scalar_type=double
                 ]
                 E:\SDKs\boost_1_57_0\boost/numeric/ublas/matrix.hpp(102) : see reference to class template instantiation 'boost::numeric::ublas::unbounded_array<scalar_type,std::allocator<scalar_type>>' being compiled
                 with
                 [
                     scalar_type=double
                 ]
                 E:\Github\BLPG-Solver\include\math/matrix.h(18) : see reference to class template instantiation 'boost::numeric::ublas::matrix<scalar_type,boost::numeric::ublas::basic_row_major<size_t,ptrdiff_t>,boost::numeric::ublas::unbounded_array<scalar_type,std::allocator<scalar_type>>>' being compiled
                 with
                 [
                     scalar_type=double
                 ]
                 e:\github\blpg-solver\blpg-solver\simplex.cuh(40) : see reference to class template instantiation 'math::matrix<double>' being compiled
     1>C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\include\xutility(2132): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\include\xutility(2113) : see declaration of 'std::_Copy_impl'
                 E:\SDKs\boost_1_57_0\boost/numeric/ublas/storage.hpp(204) : see reference to function template instantiation '_OutIt std::copy<double*,double*>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=double *
         ,            _InIt=double *
                 ]
                 E:\SDKs\boost_1_57_0\boost/numeric/ublas/storage.hpp(201) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<scalar_type,std::allocator<scalar_type>> &boost::numeric::ublas::unbounded_array<scalar_type,std::allocator<scalar_type>>::operator =(const boost::numeric::ublas::unbounded_array<scalar_type,std::allocator<scalar_type>> &)'
                 with
                 [
                     scalar_type=double
                 ]
                 E:\SDKs\boost_1_57_0\boost/numeric/ublas/matrix.hpp(310) : see reference to function template instantiation 'boost::numeric::ublas::unbounded_array<scalar_type,std::allocator<scalar_type>> &boost::numeric::ublas::unbounded_array<scalar_type,std::allocator<scalar_type>>::operator =(const boost::numeric::ublas::unbounded_array<scalar_type,std::allocator<scalar_type>> &)' being compiled
                 with
                 [
                     scalar_type=double
                 ]
     1>Done Building Project "E:\Github\BLPG-Solver\BLPG-Solver\BLPG-Solver.vcxproj" (CudaBuildCore target(s)).
     1>E:/Github/BLPG-Solver/BLPG-Solver/GPU_Tester.cu(155): warning C4018: '<=' : signed/unsigned mismatch
     1>E:/Github/BLPG-Solver/BLPG-Solver/GPU_Tester.cu(170): warning C4244: '=' : conversion from 'boost::timer::nanosecond_type' to 'double', possible loss of data
     1>E:/Github/BLPG-Solver/BLPG-Solver/GPU_Tester.cu(198): warning C4267: 'initializing' : conversion from 'size_t' to 'unsigned int', possible loss of data
     1>E:/Github/BLPG-Solver/BLPG-Solver/GPU_Tester.cu(206): warning C4267: '=' : conversion from 'size_t' to 'unsigned int', possible loss of data
     1>E:/Github/BLPG-Solver/BLPG-Solver/GPU_Tester.cu(219): warning C4244: '=' : conversion from 'unsigned __int64' to 'unsigned int', possible loss of data
     1>E:/Github/BLPG-Solver/BLPG-Solver/GPU_Tester.cu(236): warning C4244: 'initializing' : conversion from 'unsigned __int64' to 'unsigned int', possible loss of data
     1>E:/Github/BLPG-Solver/BLPG-Solver/GPU_Tester.cu(248): warning C4267: 'argument' : conversion from 'size_t' to 'unsigned int', possible loss of data
     1>E:/Github/BLPG-Solver/BLPG-Solver/GPU_Tester.cu(254): warning C4244: '=' : conversion from 'boost::timer::nanosecond_type' to 'double', possible loss of data
     1>E:/Github/BLPG-Solver/BLPG-Solver/GPU_Tester.cu(258): warning C4244: '=' : conversion from 'boost::timer::nanosecond_type' to 'double', possible loss of data
     1>E:/Github/BLPG-Solver/BLPG-Solver/GPU_Tester.cu(276): warning C4018: '<' : signed/unsigned mismatch
     1>E:/Github/BLPG-Solver/BLPG-Solver/GPU_Tester.cu(340): warning C4267: 'argument' : conversion from 'size_t' to 'unsigned int', possible loss of data
     1>E:/Github/BLPG-Solver/BLPG-Solver/GPU_Tester.cu(348): warning C4244: '=' : conversion from 'boost::timer::nanosecond_type' to 'double', possible loss of data
     1>E:/Github/BLPG-Solver/BLPG-Solver/GPU_Tester.cu(365): warning C4267: 'initializing' : conversion from 'size_t' to 'unsigned long', possible loss of data
     1>E:/Github/BLPG-Solver/BLPG-Solver/GPU_Tester.cu(380): warning C4018: '<' : signed/unsigned mismatch
     1>C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\include\xmemory(348): warning C4996: 'std::_Uninitialized_copy0': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\include\xmemory(333) : see declaration of 'std::_Uninitialized_copy0'
                 E:\SDKs\boost_1_57_0\boost/numeric/ublas/storage.hpp(94) : see reference to function template instantiation '_FwdIt std::uninitialized_copy<const double*,double*>(_InIt,_InIt,_FwdIt)' being compiled
                 with
                 [
                     _FwdIt=double *
         ,            _InIt=const double *
                 ]
                 E:\SDKs\boost_1_57_0\boost/numeric/ublas/storage.hpp(89) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<scalar_type,std::allocator<scalar_type>>::unbounded_array(const boost::numeric::ublas::unbounded_array<scalar_type,std::allocator<scalar_type>> &)'
                 with
                 [
                     scalar_type=double
                 ]
                 E:\SDKs\boost_1_57_0\boost/numeric/ublas/matrix.hpp(162) : see reference to function template instantiation 'boost::numeric::ublas::unbounded_array<scalar_type,std::allocator<scalar_type>>::unbounded_array(const boost::numeric::ublas::unbounded_array<scalar_type,std::allocator<scalar_type>> &)' being compiled
                 with
                 [
                     scalar_type=double
                 ]
                 E:\SDKs\boost_1_57_0\boost/numeric/ublas/matrix.hpp(102) : see reference to class template instantiation 'boost::numeric::ublas::unbounded_array<scalar_type,std::allocator<scalar_type>>' being compiled
                 with
                 [
                     scalar_type=double
                 ]
                 E:\Github\BLPG-Solver\include\math/matrix.h(18) : see reference to class template instantiation 'boost::numeric::ublas::matrix<scalar_type,boost::numeric::ublas::basic_row_major<size_t,ptrdiff_t>,boost::numeric::ublas::unbounded_array<scalar_type,std::allocator<scalar_type>>>' being compiled
                 with
                 [
                     scalar_type=double
                 ]
                 e:\github\blpg-solver\blpg-solver\simplex.cuh(40) : see reference to class template instantiation 'math::matrix<double>' being compiled
     1>C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\include\xutility(2132): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\include\xutility(2113) : see declaration of 'std::_Copy_impl'
                 E:\SDKs\boost_1_57_0\boost/numeric/ublas/storage.hpp(204) : see reference to function template instantiation '_OutIt std::copy<double*,double*>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=double *
         ,            _InIt=double *
                 ]
                 E:\SDKs\boost_1_57_0\boost/numeric/ublas/storage.hpp(201) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<scalar_type,std::allocator<scalar_type>> &boost::numeric::ublas::unbounded_array<scalar_type,std::allocator<scalar_type>>::operator =(const boost::numeric::ublas::unbounded_array<scalar_type,std::allocator<scalar_type>> &)'
                 with
                 [
                     scalar_type=double
                 ]
                 E:\SDKs\boost_1_57_0\boost/numeric/ublas/matrix.hpp(310) : see reference to function template instantiation 'boost::numeric::ublas::unbounded_array<scalar_type,std::allocator<scalar_type>> &boost::numeric::ublas::unbounded_array<scalar_type,std::allocator<scalar_type>>::operator =(const boost::numeric::ublas::unbounded_array<scalar_type,std::allocator<scalar_type>> &)' being compiled
                 with
                 [
                     scalar_type=double
                 ]
     1>Done Building Project "E:\Github\BLPG-Solver\BLPG-Solver\BLPG-Solver.vcxproj" (CudaBuildCore target(s)).
     1>ClCompile:
         C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\bin\x86_amd64\CL.exe /c /I"E:\Github\BLPG-Solver\/include" /IE:\SDKs\boost_1_57_0 /I"E:\SDKs\glpk-4.63\src" /I"C:\Program Files (x86)\Visual Leak Detector\include" /I"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0\include" /Zi /nologo /W3 /WX- /Od /D WIN32 /D WIN64 /D _DEBUG /D _CONSOLE /D _MBCS /D BOOST_UBLAS_USE_INDEXED_ITERATOR /Gm /EHsc /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Fo"x64\Debug\\" /Fd"x64\Debug\vc120.pdb" /Gd /TP /errorReport:prompt parseBenchmark.cpp
         parseBenchmark.cpp
     1>parseBenchmark.cpp(337): warning C4018: '<' : signed/unsigned mismatch
     1>parseBenchmark.cpp(338): warning C4018: '<' : signed/unsigned mismatch
     1>parseBenchmark.cpp(368): warning C4101: 'i' : unreferenced local variable
     1>C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\include\xmemory(348): warning C4996: 'std::_Uninitialized_copy0': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\include\xmemory(333) : see declaration of 'std::_Uninitialized_copy0'
                 E:\SDKs\boost_1_57_0\boost/numeric/ublas/storage.hpp(94) : see reference to function template instantiation '_FwdIt std::uninitialized_copy<const double*,double*>(_InIt,_InIt,_FwdIt)' being compiled
                 with
                 [
                     _FwdIt=double *
         ,            _InIt=const double *
                 ]
                 E:\SDKs\boost_1_57_0\boost/numeric/ublas/storage.hpp(89) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<T,std::allocator<_Ty>>::unbounded_array(const boost::numeric::ublas::unbounded_array<T,std::allocator<_Ty>> &)'
                 with
                 [
                     T=double
         ,            _Ty=double
                 ]
                 E:\SDKs\boost_1_57_0\boost/numeric/ublas/matrix.hpp(162) : see reference to function template instantiation 'boost::numeric::ublas::unbounded_array<T,std::allocator<_Ty>>::unbounded_array(const boost::numeric::ublas::unbounded_array<T,std::allocator<_Ty>> &)' being compiled
                 with
                 [
                     T=double
         ,            _Ty=double
                 ]
                 E:\SDKs\boost_1_57_0\boost/numeric/ublas/matrix.hpp(102) : see reference to class template instantiation 'boost::numeric::ublas::unbounded_array<T,std::allocator<_Ty>>' being compiled
                 with
                 [
                     T=double
         ,            _Ty=double
                 ]
                 e:\github\blpg-solver\include\math\matrix.h(19) : see reference to class template instantiation 'boost::numeric::ublas::matrix<scalar_type,boost::numeric::ublas::row_major,boost::numeric::ublas::unbounded_array<T,std::allocator<_Ty>>>' being compiled
                 with
                 [
                     scalar_type=double
         ,            T=double
         ,            _Ty=double
                 ]
                 parseBenchmark.cpp(76) : see reference to class template instantiation 'math::matrix<double>' being compiled
       Link:
         C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\bin\x86_amd64\link.exe /ERRORREPORT:PROMPT /OUT:"E:\Github\BLPG-Solver\x64\Debug\BLPG-Solver.exe" /INCREMENTAL /NOLOGO /LIBPATH:"C:\Program Files (x86)\Visual Leak Detector\lib\Win64" /LIBPATH:"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0\lib\x64" cudart.lib kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /MANIFEST /MANIFESTUAC:"level='asInvoker' uiAccess='false'" /manifest:embed /DEBUG /PDB:"E:\Github\BLPG-Solver\x64\Debug\BLPG-Solver.pdb" /SUBSYSTEM:CONSOLE /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:"E:\Github\BLPG-Solver\x64\Debug\BLPG-Solver.lib" /MACHINE:X64 x64\Debug\GPU_Tester.cu.obj
         x64\Debug\simplex.cu.obj
         x64\Debug\parseBenchmark.obj
     1>LINK : fatal error LNK1104: cannot open file 'libboost_timer-vc120-mt-gd-1_57.lib'
     1>Done Building Project "E:\Github\BLPG-Solver\BLPG-Solver\BLPG-Solver.vcxproj" (Build target(s)) -- FAILED.

Build FAILED.

Time Elapsed 00:00:15.20
